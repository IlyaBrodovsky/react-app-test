{"ast":null,"code":"var _jsxFileName = \"/Users/ilyabrodovsky/Documents/react/react-practice-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport PostFilter from \"./components/PostFilter\";\nimport PostForm from \"./components/PostForm\";\nimport PostList from \"./components/PostList\";\nimport MyButton from \"./components/UI/button/MyButton\";\nimport MyModal from \"./components/UI/MyModal/MyModal\";\nimport { usePosts } from \"./hooks/usePost\";\nimport \"./styles/App.css\";\nimport PostService from \"./API/PostService\";\nimport Loader from \"./components/UI/Loader/Loader\";\nimport { useFetching } from \"./hooks/useFetching\";\nimport { getPageCount } from \"./utils/pages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({\n    sort: \"\",\n    query: \"\"\n  });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n  let pagesArray = [];\n\n  for (let i = 0; i < totalPages; i++) {\n    pagesArray.push(i + 1);\n  }\n\n  console.log(pagesArray);\n  const [fetchPosts, isPostLoading, postError] = useFetching(async () => {\n    const response = await PostService.getAll(limit, page);\n    setPosts(response.data);\n    const totalCount = response.headers[\"x-total-count\"];\n    setTotalPages(getPageCount(totalCount, limit));\n  });\n  console.log(totalPages);\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const createPost = newPost => {\n    setPosts([...posts, newPost]);\n    setModal(false);\n  }; // получаем post из соседнего компонента\n\n\n  const removePost = post => {\n    setPosts(posts.filter(p => p.id !== post.id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPosts,\n      children: \"GET POST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      style: {\n        marginTop: \"30px\"\n      },\n      onClick: () => setModal(true),\n      children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(PostForm, {\n        create: createPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: \"15px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostFilter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }, this), isPostLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n      remove: removePost,\n      posts: sortedAndSearchedPosts,\n      title: \"Посты про JS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/7WxQMtRm3bB80hA8JoFrNmUNyY=\", false, function () {\n  return [usePosts, useFetching];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ilyabrodovsky/Documents/react/react-practice-app/src/App.js"],"names":["React","useEffect","useState","PostFilter","PostForm","PostList","MyButton","MyModal","usePosts","PostService","Loader","useFetching","getPageCount","App","posts","setPosts","filter","setFilter","sort","query","modal","setModal","totalPages","setTotalPages","limit","setLimit","page","setPage","sortedAndSearchedPosts","pagesArray","i","push","console","log","fetchPosts","isPostLoading","postError","response","getAll","data","totalCount","headers","createPost","newPost","removePost","post","p","id","marginTop","margin","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PostFilter from \"./components/PostFilter\";\nimport PostForm from \"./components/PostForm\";\nimport PostList from \"./components/PostList\";\nimport MyButton from \"./components/UI/button/MyButton\";\nimport MyModal from \"./components/UI/MyModal/MyModal\";\nimport { usePosts } from \"./hooks/usePost\";\nimport \"./styles/App.css\";\nimport PostService from \"./API/PostService\";\nimport Loader from \"./components/UI/Loader/Loader\";\nimport { useFetching } from \"./hooks/useFetching\";\nimport { getPageCount } from \"./utils/pages\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({ sort: \"\", query: \"\" });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0)\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n\n\n  let pagesArray = []\n\n  for (let i = 0; i < totalPages; i++) {\n    pagesArray.push(i + 1)\n  }\n  console.log(pagesArray)\n\n\n  const [fetchPosts, isPostLoading, postError] = useFetching(async () => {\n    const response = await PostService.getAll(limit, page);\n    setPosts(response.data);\n    const totalCount = response.headers[\"x-total-count\"];\n    setTotalPages(getPageCount(totalCount, limit));\n  });\n\n  console.log(totalPages);\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const createPost = (newPost) => {\n    setPosts([...posts, newPost]);\n    setModal(false);\n  };\n\n  // получаем post из соседнего компонента\n  const removePost = (post) => {\n    setPosts(posts.filter((p) => p.id !== post.id));\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={fetchPosts}>GET POST</button>\n      <MyButton style={{ marginTop: \"30px\" }} onClick={() => setModal(true)}>\n        Создать пользователя\n      </MyButton>\n      <MyModal visible={modal} setVisible={setModal}>\n        <PostForm create={createPost} />\n      </MyModal>\n      <hr style={{ margin: \"15px 0\" }} />\n      <PostFilter filter={filter} setFilter={setFilter} />\n      {postError && <h1>Произошла ошибка</h1>}\n      {isPostLoading ? (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginTop: \"50px\",\n          }}\n        >\n          <Loader />{\" \"}\n        </div>\n      ) : (\n        <PostList\n          remove={removePost}\n          posts={sortedAndSearchedPosts}\n          title={\"Посты про JS\"}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}