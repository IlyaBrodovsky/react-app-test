{"ast":null,"code":"var _jsxFileName = \"/Users/ilyabrodovsky/Documents/react/react-practice-app/src/pages/Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport PostFilter from \"../components/PostFilter\";\nimport PostForm from \"../components/PostForm\";\nimport PostList from \"../components/PostList\";\nimport MyButton from \"../components/UI/button/MyButton\";\nimport MyModal from \"../components/UI/MyModal/MyModal\";\nimport { usePosts } from \"../hooks/usePost\";\nimport PostService from \"../API/PostService\";\nimport Loader from \"../components/UI/Loader/Loader\";\nimport { useFetching } from \"../hooks/useFetching\";\nimport { getPageCount } from \"../utils/pages\";\nimport Pagination from \"../components/UI/pagination/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Posts() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({\n    sort: \"\",\n    query: \"\"\n  });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n  const lastElement = useRef();\n  const observer = useRef();\n  console.log(lastElement);\n  const [fetchPosts, isPostLoading, postError] = useFetching(async (limit, page) => {\n    const response = await PostService.getAll(limit, page);\n    setPosts([...posts, ...response.data]);\n    const totalCount = response.headers[\"x-total-count\"];\n    setTotalPages(getPageCount(totalCount, limit));\n  });\n  useEffect(() => {\n    var callback = function (entries, observer) {\n      /* Content excerpted, show below */\n    };\n\n    observer.current = new IntersectionObserver(callback);\n  }, []);\n  useEffect(() => {\n    fetchPosts(limit, page);\n  }, [page]);\n\n  const createPost = newPost => {\n    setPosts([...posts, newPost]);\n    setModal(false);\n  }; // получаем post из соседнего компонента\n\n\n  const removePost = post => {\n    setPosts(posts.filter(p => p.id !== post.id));\n  };\n\n  const changePage = page => {\n    setPage(page);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(MyButton, {\n      style: {\n        marginTop: \"30px\"\n      },\n      onClick: () => setModal(true),\n      children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u043E\\u0441\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(PostForm, {\n        create: createPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: \"15px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostFilter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"$\", postError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(PostList, {\n      remove: removePost,\n      posts: sortedAndSearchedPosts,\n      title: \"Посты про JS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lastElement,\n      style: {\n        height: '20px',\n        background: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), isPostLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"50px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      page: page,\n      changePage: changePage,\n      totalPages: totalPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Posts, \"OUuyDjMtcyy6HJ6a0DVKuH/anTA=\", false, function () {\n  return [usePosts, useFetching];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/ilyabrodovsky/Documents/react/react-practice-app/src/pages/Posts.jsx"],"names":["React","useEffect","useRef","useState","PostFilter","PostForm","PostList","MyButton","MyModal","usePosts","PostService","Loader","useFetching","getPageCount","Pagination","Posts","posts","setPosts","filter","setFilter","sort","query","modal","setModal","totalPages","setTotalPages","limit","setLimit","page","setPage","sortedAndSearchedPosts","lastElement","observer","console","log","fetchPosts","isPostLoading","postError","response","getAll","data","totalCount","headers","callback","entries","current","IntersectionObserver","createPost","newPost","removePost","post","p","id","changePage","marginTop","margin","height","background","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport PostFilter from \"../components/PostFilter\";\nimport PostForm from \"../components/PostForm\";\nimport PostList from \"../components/PostList\";\nimport MyButton from \"../components/UI/button/MyButton\";\nimport MyModal from \"../components/UI/MyModal/MyModal\";\nimport { usePosts } from \"../hooks/usePost\";\nimport PostService from \"../API/PostService\";\nimport Loader from \"../components/UI/Loader/Loader\";\nimport { useFetching } from \"../hooks/useFetching\";\nimport { getPageCount } from \"../utils/pages\";\nimport Pagination from \"../components/UI/pagination/Pagination\";\n\n\nfunction Posts() {\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({ sort: \"\", query: \"\" });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n  const lastElement = useRef()\n  const observer = useRef()\n  console.log(lastElement)\n\n  const [fetchPosts, isPostLoading, postError] = useFetching(\n    async (limit, page) => {\n      const response = await PostService.getAll(limit, page);\n      setPosts([...posts, ...response.data]);\n      const totalCount = response.headers[\"x-total-count\"];\n      setTotalPages(getPageCount(totalCount, limit));\n    }\n  );\n\n  useEffect(() => {\n    var callback = function(entries, observer) {\n        /* Content excerpted, show below */\n    };\n    observer.current = new IntersectionObserver(callback);\n  }, [])\n\n  useEffect(() => {\n    fetchPosts(limit, page);\n  }, [page]);\n\n  const createPost = (newPost) => {\n    setPosts([...posts, newPost]);\n    setModal(false);\n  };\n\n  // получаем post из соседнего компонента\n  const removePost = (post) => {\n    setPosts(posts.filter((p) => p.id !== post.id));\n  };\n\n  const changePage = (page) => {\n    setPage(page);\n    \n  };\n\n  return (\n    <div className=\"App\">\n      <MyButton style={{ marginTop: \"30px\" }} onClick={() => setModal(true)}>\n        Создать пост\n      </MyButton>\n      <MyModal visible={modal} setVisible={setModal}>\n        <PostForm create={createPost} />\n      </MyModal>\n      <hr style={{ margin: \"15px 0\" }} />\n      <PostFilter filter={filter} setFilter={setFilter} />\n      {postError && <h1>${postError}</h1>}\n      <PostList\n        remove={removePost}\n        posts={sortedAndSearchedPosts}\n        title={\"Посты про JS\"}\n      />\n      <div ref={lastElement} style={{height: '20px', background: 'red'}}></div>\n      {isPostLoading && (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginTop: \"50px\",\n          }}\n        >\n          <Loader />\n        </div>\n      )}\n      <Pagination page={page} changePage={changePage} totalPages={totalPages} />\n    </div>\n  );\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}