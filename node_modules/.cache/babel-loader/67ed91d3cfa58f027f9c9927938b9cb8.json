{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nexport const useSortedPost = (posts, sort) => {\n  _s();\n\n  const sortedPosts = useMemo(() => {\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n\n    return posts;\n  }, [sort, posts]);\n  return sortedPosts;\n};\n\n_s(useSortedPost, \"JCOM6shKwCo6CttVuNVxaNMnTKM=\");\n\nexport const usePosts = (posts, sort, query) => {\n  _s2();\n\n  const sortedPosts = useSortedPost(posts, sort);\n  const sortedAndSearchedPosts = useMemo(() => {\n    return sortedPosts.filter(post => post.title.toLowerCase().includes(query));\n  }, [query, sortedPosts]);\n  return sortedAndSearchedPosts;\n};\n\n_s2(usePosts, \"R/GCoSmcZNJ/E8RIkzHhXnTLfXA=\", false, function () {\n  return [useSortedPost];\n});","map":{"version":3,"sources":["/Users/ilyabrodovsky/Documents/react/react-practice-app/src/hooks/usePost.js"],"names":["useMemo","useSortedPost","posts","sort","sortedPosts","a","b","localeCompare","usePosts","query","sortedAndSearchedPosts","filter","post","title","toLowerCase","includes"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC5C,QAAMC,WAAW,GAAGJ,OAAO,CAAC,MAAM;AAChC,QAAIG,IAAJ,EAAU;AACR,aAAO,CAAC,GAAGD,KAAJ,EAAWC,IAAX,CAAgB,CAACE,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,IAAD,CAAD,CAAQI,aAAR,CAAsBD,CAAC,CAACH,IAAD,CAAvB,CAA1B,CAAP;AACD;;AACD,WAAOD,KAAP;AACD,GAL0B,EAKxB,CAACC,IAAD,EAAOD,KAAP,CALwB,CAA3B;AAMA,SAAOE,WAAP;AACD,CARM;;GAAMH,a;;AAUb,OAAO,MAAMO,QAAQ,GAAG,CAACN,KAAD,EAAQC,IAAR,EAAcM,KAAd,KAAwB;AAAA;;AAC5C,QAAML,WAAW,GAAGH,aAAa,CAACC,KAAD,EAAQC,IAAR,CAAjC;AACA,QAAMO,sBAAsB,GAAGV,OAAO,CAAC,MAAM;AACzC,WAAOI,WAAW,CAACO,MAAZ,CAAoBC,IAAD,IACxBA,IAAI,CAACC,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCN,KAAlC,CADK,CAAP;AAGD,GAJmC,EAIjC,CAACA,KAAD,EAAQL,WAAR,CAJiC,CAAtC;AAME,SAAOM,sBAAP;AACL,CATM;;IAAMF,Q;UACWP,a","sourcesContent":["import { useMemo } from \"react\";\n\nexport const useSortedPost = (posts, sort) => {\n  const sortedPosts = useMemo(() => {\n    if (sort) {\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\n    }\n    return posts;\n  }, [sort, posts]);\n  return sortedPosts;\n};\n\nexport const usePosts = (posts, sort, query) => {\n    const sortedPosts = useSortedPost(posts, sort)\n    const sortedAndSearchedPosts = useMemo(() => {\n        return sortedPosts.filter((post) =>\n          post.title.toLowerCase().includes(query)\n        );\n      }, [query, sortedPosts]);\n\n      return sortedAndSearchedPosts;\n}\n"]},"metadata":{},"sourceType":"module"}